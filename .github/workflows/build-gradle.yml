name: petclinic-build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
jobs:
  build-and-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 #  v2
      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '25'
          #cache: maven
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      - name: Gradle config
        run: |
          jf gradlec \
            --repo-deploy=joepet-gradle-release-local \
            --repo-resolve=joepet-gradle-release
      - name: Gradke Build & Test
        run: |
          # Build steps here
          jf gradle clean build test

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: joefrog.jfrog.io/joepet-docker/petclinic-image:${{ github.run_number }}
        run: |
          jf docker build -t $IMAGE_NAME .
          jf docker push $IMAGE_NAME    

      - name: Publish Build Info
        env:
          JFROG_CLI_BUILD_NAME: petclinic-build
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
        run: |
          # Sammeln aller relevanten Build-Informationen
          jf rt build-add-git # connect to git metadata and repo
          jf rt build-collect-env # show ENV variables
          jf rt build-publish # push info to rt 

      - name: Scan Docker Image
        env:
          IMAGE_NAME: joefrog.jfrog.io/joepet-docker/petclinic-image:${{ github.run_number }}
        run: |
          # FÃ¼hre Xray Scan durch und speichere Ergebnisse als JSON
          jf docker scan $IMAGE_NAME --format=json > xray-results.json
      
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: xray-scan-results
          path: xray-results.json